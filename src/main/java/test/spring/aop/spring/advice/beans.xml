<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-2.5.xsd  
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
        http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx-2.5.xsd">

	<!--
		示例使用spring AOP 方法实现aop方法拦截, springAOP使用动态代理方式实现,自定义的通知需要 实现 spring
		提供的接口,并为自定义通知实现使用 ProxyFactoryBean 创建代理类
	-->

	<!-- 被拦截对象 -->
	<bean id="buyTvImpl" class="aop.spring.advice.model.BuyTvImpl" />
	<bean id="buyTv" parent="proxyBean">
		<property name="target" ref="buyTvImpl"></property>
	</bean>
	<!-- 定义4个通知 -->
	<bean id="tvBefore" class="aop.spring.advice.proxy.TvBefore" />
	<bean id="tvAround" class="aop.spring.advice.proxy.TvAround" />
	<bean id="tvAfter" class="aop.spring.advice.proxy.TvAfter" />
	<bean id="tvThrows" class="aop.spring.advice.proxy.TvThrows" />

	<!-- ProxyFactoryBean产生代理对象,通过代理类访问业务逻辑 -->
	<bean id="proxyBean" abstract="true" 
		class="org.springframework.aop.framework.ProxyFactoryBean">

		<property name="proxyInterfaces">
			<value>aop.spring.advice.model.IBuyTV</value>
		</property>

<!--		<property name="target">-->
<!--			<ref bean="buyTvImpl" />-->
<!--		</property>-->

		<!-- 确定代理需要的拦截器,可以是普通的Advice或Advisor -->
		<property name="interceptorNames">
			<list>
				<value>tvBefore</value>
				<value>tvAround</value>
				<value>tvAfter</value>
				<value>tvThrows</value>
			</list>
		</property>
	</bean>
	
</beans>